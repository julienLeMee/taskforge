// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  projects      Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modèle pour les tâches
model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  status        TaskStatus? @default(TODO)
  priority      Priority   @default(MEDIUM)

  // Organisation temporelle
  timeframe     Timeframe?  @default(UPCOMING)
  dueDate       DateTime?

  // Support
  isSupport     Boolean    @default(false)

  // Meeting
  isMeeting     Boolean    @default(false)

  // Done
  isDone        Boolean    @default(false)

  // Dates
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  completedAt   DateTime?

  // Relations
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  WAITING
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Timeframe {
  TODAY
  THIS_WEEK
  UPCOMING
}

// Modèle pour les projets
model Project {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("En cours")
  nextSteps   Json?       // Pour stocker les étapes avec leur statut (complété ou non)
  deployment  String?     @db.Text  // Informations de mise en ligne
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
